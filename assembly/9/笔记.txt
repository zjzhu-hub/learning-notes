div bh(bh是一个8位的寄存器，意味着bh里面存放的是除数) 。 当指令运行时 使用寄存器AX的内容除以bh
div byte (1字节) [0x200]
	使用寄存器AX的内容 除以这个[0X200]的内容
	被除数在寄存器AX里。
	相除后商在AL中，余数在AH中
	
div bx
div word 字（16位 单字 2字节）[0x200]

div ebx
div dword （32位 双字 4字节）[0x200]
	
div rbx 
div qword  (64位 四字 8字节) [0x200]
	qword 代表除数是128位的，低64位在寄存器RAX中，高64位在RDX中，相除后商在RAX中，余数在RDX中



寄存器
rax 64位完整寄存器
eax 32位 rax的低32位
ax 16位 eax的低16位
ah 8位 ax的高8位
al 8位 ax的低8位

A/B/C/D是四兄弟 L代表低，H代表高
AL/BL/CL/DL 是低8位
AH/BH/CH/DH 是高8位

无前缀都代表16位如：ax
E Extended 扩展到32位：eax
R Re-extended（在扩展到64位）：rax


xor指令
异或=XOR=eXclussive OR
下面这个是规则
0 异或 0 = 0
0 异或 1 = 1
1 异或 0 = 1
1 异或 1 = 0

129 异或 127 = 254
129 = 		1 0 0 0 0 0 0 1
127 = 		0 1 1 1 1 1 1 1
异或结果=                 1 1 1 1 1 1 1 0  = 254（10进制数） 

上面每个bit进行异或运算

xor r/m, r/m/imm
r表示寄存器
m代表内存地址
imm 立即数

左操作数 有两种表示形式
r和m

又操作数 有三种表示形式
r和m和imm

异或的操作结果保存在左操作数中
如果是寄存器就保存在寄存器中，如果是内存地址那就保存在内存地址中

需要注意2个操作数 数据长度必须相同

xor bh，al 表示 bh和al进行异或操作 结果保存在bh，bh和al都是8位寄存器 所以没问题
xor cx，dx 和上面一样 只不过这个是16位的
xor ax，3 这里面为了保持位一直 3会当成一个16位的数字进行运算
xor word [0x2002], 67 从内存地址0x2002 和 67进行异或运算 这里用word来修饰代表16位的一个字，67也会当成一个16位的字参与运算 运算结果会返回到0x2002内存地址
xor si，[0x2002] 这里si是16位的 ，必须从内存地址0x2002读一个16位的字参与运算 ，结果返回到si中 
 

add
add r/m, r/m/imm 
r表示寄存器
m代表内存地址
imm 立即数

在32位和64位处理器里面，可以使用32位和64位的操作数

相加的结果在左侧寄存器或者内存地址，相加的数 位必须相同，而且两个操作数不能同时为内存地址 也就是不能同时为m
add bh, al 相加都是8位没问题，保存在结果到bh
add cx, dx 相加都是16位没问题，保存结果到cx
add ax, 3 相加保存结果到ax，这里3会被当做16位数
add word [0x2002], 67 这里67会被当做16位字运算，相加保存结果到内存地址[0X2002] 
add si, [0x2002] 相加保存结果到si寄存器, 从内存地址0x2002读取一个16位的字进行运算


需要注意
8 位除法（如div bl）：被除数AX，除数bl，商在 AL，余数在 AH，。
16 位除法（如div si）：被除数DX（高位）:AX（低位），除数si，商在 AX，余数在 DX，。
32 位除法 （如div ebx）： 被除数EDX（高位）:EAX（低位），除数 ebx，商在EAX，余数EDX
64 位除法（如div rbx）：被除数RDX（高位）:RAX（低位），除数rbx，  商在 RAX，余数在 RDX。
